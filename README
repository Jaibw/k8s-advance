# INSTALL DOCKER 
wget https://raw.githubusercontent.com/Jaibw/k8s-advance/main/install-docker.sh && sh install-docker.sh

# RUN 1ST CONTAINER 
docker run hello-world 
docker run ubuntu apt update
docker run centos yum update
docker run python python --version
docker run openjdk java --help 

# LIST LOCAL IMAGES 
docker images
docker pull mysql
docker images
docker inspect mysql
docker history mysql
docker rmi mysql 


# LIST CONTAINERS 
docker ps  -a
docker run jpetazzo/clock
docker run -d jpetazzo/clock
docker run -d nginx
docker run -e MYSQL_ROOT_PASSWORD=secret  -d mysql
docker ps      #  active containers 
docker stop <container-id>   
docker stop <container-id> <container-id>  
docker ps -a   # list all the containers

docker ps       # active containers 
docker ps -a    # all containers 
docker ps -q    # ids for active conainers 
docker ps -qa   # ids for all conainers
docker ps -l    # info about last container

docker stop `docker ps -q`    # stop all the active containers 
docker rm `docker ps -qa`     # remove all the containers 

# DOCKER HUB 
https://hub.docker.com/search?type=image&image_filter=official

# TROUBLESHOOT A CONTAINER
docker run --name database -e MYSQL_ROOT_PASSWORD=secret -d mysql
docker run --name website -d nginx
docker ps 
docker logs website
docker exec -it website bash
    # curl localhost
    # exit 
docker logs database 
docker exec -it database bash
    # ls /etc/mysql 
    # cat /etc/mysql/my.cnf 
    # exit 
docker stop website database 
docker rm website database   # rm - remove containers 
docker rmi nginx mysql       # rmi - remove image 

# DOCKER ADVANCE COMMANDS 
docker system df
docker system info
docker system events   # Ctrl + c
docker system prune
docker system prune -a

docker run --name mycache -d redis 
docker run --hostname ubuntu01 -it ubuntu bash 
   # hostname 
   # exit 
docker run -e USER=DEMO -e PASS=SECRET -it ubuntu bash 
   # echo $USER
   # echo $PASS
docker top mycache
docker inspect mycache
sudo ls /var/lib/docker
docker run -it -m 300M ubuntu:14.04 /bin/bash
   # top    press q to exit 
   # exit 
docker run -it -m 500M --memory-reservation 200M ubuntu:14.04 /bin/bash
   # top    press q to exit 
   # exit
docker run -it --cpus 0.02 ubuntu:14.04 /bin/bash
   # top    press q to exit 
   # exit

docker stats             # ctrl + c

# VOLUME 
docker volume ls
docker volume create mysqldata
docker volume ls
docker inspect mysqldata
sudo ls /var/lib/docker/volumes/mysqldata/_data
docker run --name database -v mysqldata:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=secret -d mysql
docker stop database
docker rm database
sudo ls /var/lib/docker/volumes/mysqldata/_data

# PORT BINDING AND VOLUME MAPPING 
cd ~
git clone https://github.com/Jaibw/FrozenYogurtShop.git
ls FrozenYogurtShop/
docker run -v /home/ubuntu/FrozenYogurtShop:/usr/share/nginx/html -p 80:80 --name website-01 -d nginx
docker ps
Open chrome - http://<public-ip>

# SEARCH AN IMAGE 
docker search nginx
Visit https://hub.docker.com/_/nginx 

# CREATE AN IMAGE FROM CONTAINER 
docker run --name myubuntu -it ubuntu bash
    # apt update 
    # apt install -y nginx vim curl 
    # service nginx start  
    # curl localhost  
    # vim                   type :q to exit 
docker commit myubuntu myubuntu:1 
docker history myubuntu:1
docker inspect myubuntu:1
docker run -it myubuntu:1 bash
    # nginx 
    # vim                  type :q to exit 

# CREATE AN IMAGE USING Dockerfile 
mkdir ~/myubuntu
cd ~/myubuntu
wget -O Dockerfile https://raw.githubusercontent.com/Jaibw/k8s-advance/main/Dockerfile-demo
docker build -t myubuntu:2 .
docker history myubuntu:2
docker inspect myubuntu:2
docker run -it myubuntu:2 bash
   # nginx 
   # vim                  type :q to exit  

# DOCKER COMPOSE 
cd ~
git clone https://github.com/Jaibw/FrozenYogurtShop.git website01
cd website01
cat docker-compose.yml
docker-compose up
Open chrome - http://<public-ip>

# INSTALL MINIKUBE 
cd ~
docker stop `docker ps  -qa`
docker rm `docker ps  -qa`
docker system prune -a
docker system prune --volumes

curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
sudo install minikube-linux-amd64 /usr/local/bin/minikube
minikube start --driver=docker
minikube kubectl -- get pods -A

# SETUP CLUSTER WITH KUBEADM - MASTER 
sudo apt update
sudo apt -y upgrade && sudo systemctl reboot
wget https://raw.githubusercontent.com/Jaibw/k8s-advance/main/k8s-master-ubuntu-setup.sh  
sh k8s-master-ubuntu-setup.sh
Copy kubeadm join ****:6443 --token ***** --discovery-token-ca-cert-hash *****  in a notepad 
kubectl get nodes

# SETUP CLUSTER WITH KUBEADM - WORKER 
sudo apt update
sudo apt -y upgrade && sudo systemctl reboot
wget https://raw.githubusercontent.com/Jaibw/k8s-advance/main/k8s-node-ubuntu-setup.sh  
sh k8s-node-ubuntu-setup.sh
Paste sudo kubeadm join ****:6443 --token ***** --discovery-token-ca-cert-hash *****  

# BASIC COMMANDS 
kubectl get nodes
kubectl get pods -A
kubectl run demo --image=nginx
kubectl get pods
kubectl get pods -o wide
kubectl get pods -o yaml 
kubectl get pods -o json
kubectl describe pod demo
kubectl logs demo
kubectl exec -it demo -- bash
    # ls 
    # apt update 
    # exit 
kubectl delete pod demo


# CREATE POD USING YAML/YML
cd ~
wget https://raw.githubusercontent.com/Jaibw/k8s-advance/main/firstpod.yaml
cat firstpod.yaml
kubectl create -f firstpod.yaml
kubectl get pods 
kubectl delete -f firstpod.yaml

# REPLICATION CONTROLLER DEMO 
mkdir NAME
cd NAME
wget https://raw.githubusercontent.com/Jaibw/k8s-advance/main/replication-controller.yaml
sed 's/yourname/NAME/g' replication-controller.yaml > myrc.yaml
kubectl create -f myrc.yaml
kubectl get rc | grep NAME
kubectl get pods | grep NAME
kubectl get pods -o wide | grep NAME
kubectl delete pod NAME-****
kubectl get pods -o wide
kubectl describe rc NAME
kubectl delete -f myrc.yaml

# REPLICASET DEMO 
mkdir NAME
cd NAME
wget https://raw.githubusercontent.com/Jaibw/k8s-advance/main/replica-set.yaml
sed 's/yourname/NAME/g' replica-set.yaml > myrs.yaml
kubectl create -f myrs.yaml
kubectl get rs | grep NAME
kubectl get pods | grep NAME
kubectl get pods -o wide | grep NAME

kubectl scale --replicas=5 -f myrs.yaml
kubectl get rs | grep NAME
kubectl get pods -o wide | grep NAME

kubectl scale --replicas=9 rs NAME
kubectl get rs | grep NAME
kubectl get pods -o wide | grep NAME

sed 's/3/12/g' myrs.yaml > myrs-12.yaml
kubectl replace -f myrs-12.yaml 
kubectl get rs | grep NAME
kubectl get pods -o wide | grep NAME

sed 's/3/1/g' myrs.yaml > myrs-1.yaml
kubectl replace -f myrs-1.yaml 
kubectl get rs | grep NAME
kubectl get pods -o wide | grep NAME
kubectl edit rs NAME
kubectl delete rs NAME 


# DEPLOYMENT DEMO
cd NAME
wget https://raw.githubusercontent.com/Jaibw/k8s-advance/main/easy-deployment.yaml
sed 's/yourname/NAME/g' easy-deployment.yaml > mydeployment.yaml
kubectl create -f mydeployment.yaml
kubectl get deployment | grep NAME
kubectl describe deployment NAME
kubectl get rs | grep NAME
kubectl get pods | grep NAME
kubectl get pods -o wide | grep NAME
kubectl get all | grep NAME

# SERVICE: NODEPORT DEMO
cd NAME
wget https://raw.githubusercontent.com/Jaibw/k8s-advance/main/website-nodeport.yaml
sed 's/yourname/NAME/g' website-nodeport.yaml > mywebsite-nodeport.yaml
kubectl create -f mywebsite-nodeport.yaml
kubectl get deployment | grep NAME
kubectl get pods -o wide | grep NAME
kubectl describe svc NAME
kubectl get svc | grep NAME
#      NAME          NodePort    <ClusterIP>   <none>        80:<nodeport>/TCP   23s
curl <ClusterIP>
# Open chrome and try to open 
# http://13.52.183.186:nodeport
# http://54.153.36.80:nodeport
# http://13.57.253.143:nodeport
# http://3.101.25.27:nodeport
 

# SERVICE: CLUSTERIP DEMO
cd NAME
wget https://raw.githubusercontent.com/Jaibw/k8s-advance/main/frontend-backend.yaml
sed 's/yourname/NAME/g' frontend-backend.yaml > myfrontend-backend.yaml
kubectl create -f myfrontend-backend.yaml
kubectl describe svc backend-NAME
kubectl describe svc frontend-NAME
kubectl get pods | grep frontend-NAME
# pick any pod from the list 
kubectl exec -it PODNAME -- sh 
   # telnet backend-NAME 80 
   GET / 
   exit 
# Open chrome and try to open 
# http://13.52.183.186:nodeport


#UPDATE AN IMAGE 
cd NAME
wget https://raw.githubusercontent.com/Jaibw/k8s-advance/main/website.yaml
sed 's/yourname/NAME/g' website.yaml > mywebsite.yaml
kubectl create -f mywebsite.yaml
kubectl get svc | grep NAME
#      NAME          NodePort    <ClusterIP>   <none>        80:<nodeport>/TCP   23s
# Open chrome and try to open 
# http://13.52.183.186:nodeport

kubectl set image deployment NAME web=jaibw/website1602:2
kubectl rollout status deployment NAME
kubectl rollout history deployment NAME
kubectl get all | grep NAME 
# Open chrome and try to open 
# http://13.52.183.186:nodeport

kubectl rollout undo deployment NAME
kubectl rollout status deployment NAME
kubectl rollout history deployment NAME

# Open chrome and try to open 
# http://13.52.183.186:nodeport


# MYSQL PV and PVC  
cd NAME
wget https://raw.githubusercontent.com/Jaibw/k8s-advance/main/mysql-volume.yaml
sed 's/yourname/NAME/g' mysql-volume.yaml  > mysqldemo.yaml
kubectl create -f mysqldemo.yaml
kubectl get pv | grep NAME
kubectl get pvc | grep NAME
kubectl get deployment | grep NAME
kubectl describe deployment mysql-NAME
kubectl get pod -o wide | grep NAME

# NFS DEMO 
cd NAME/
wget https://raw.githubusercontent.com/Jaibw/k8s-advance/main/website-nfs.yaml
sed 's/yourname/NAME/g' website-nfs.yaml > mynfs-site.yaml
cat mynfs-site.yaml
kubectl apply -f mynfs-site.yaml
kubectl get pods -o wide | grep NAME
kubectl get svc | grep NAME
# web-NAME      NodePort    CLUSTER-IP   <none>        80 --- 
curl CLUSTER-IP

# RKE SETUP 
wget https://raw.githubusercontent.com/Jaibw/k8s-advance/main/install-docker.sh && sh install-docker.sh
docker run -d --restart=unless-stopped -p 80:80 -p 443:443 --privileged rancher/rancher:latest
# Explore Rancher using https://<public-ip>

# Deploy Prometheus and Grafana 
# Clone kube-prometheus project
git clone https://github.com/prometheus-operator/kube-prometheus.git
cd kube-prometheus 
# Creating monitoring namespace
kubectl create -f manifests/setup
kubectl get ns monitoring
kubectl get pods -n monitoring
# Deploy Prometheus Monitoring Stack on Kubernetes
kubectl create -f manifests/
kubectl get all -n monitoring
#Access it from node port 
kubectl --namespace monitoring patch svc prometheus-k8s -p '{"spec": {"type": "NodePort"}}'
kubectl --namespace monitoring patch svc alertmanager-main -p '{"spec": {"type": "NodePort"}}'
kubectl --namespace monitoring patch svc grafana -p '{"spec": {"type": "NodePort"}}'

